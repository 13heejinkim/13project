#pandas를 이용한 coding

import pandas as pd
from pandas import Series , DataFrame
import numpy as np

import matplotlib.pyplot as plt
from scipy import polyval
from pylab import plot, title, show, legend

weather = pd.read_excel('weather ver1.xlsx') ## weatehr 원본 읽기

weather.columns = ['기간','기온','강수량','상대습도'] ## column 이름 바꾸기

weather['강수량'].corr(weather['상대습도'])
#결과 대략 0.641

plt.plot(weather['강수량'],weather['상대습도'],'ro')
plt.show()

bus_name_ori = pd.read_excel('bus 이름(원본).xlsx') ## bus 이름 원본 읽기
subway = pd.read_excel('subway ver6.xlsx') ## subway 엑셀 읽기

bus_name = {'노선번호':[], '노선명':[], '표준버스정류장ID':[], '버스정류장ARS번호':[],'역명':[]}
bus_name = pd.DataFrame(bus_name)
#필요한 bus 이름을 저장 할 frame만들기

len_sub = len(subway) # len_sub = 161
len_bus = len(bus_name_ori) # len_bus = 45154

rename = []
for i in range(len_sub) :
    name = subway['지하철역'][i]+'역'
    check = 0
    for j in range(len_bus) :
        if bus_name_ori['역명'][j].find(name) != -1 :
            # 지하철역명이 존재
            bus_name = bus_name.append(bus_name_ori[j:j+1], ignore_index = True)
            check = 1
    if check == 0 :
        print(name+'은 존재하지 않는다')
        rename.append(subway['지하철역'][i])
##OO역으로 검색
        
for i in range(len(rename)) :
    name = rename[i]
    check = 0
    for j in range(len_bus) :
        if bus_name_ori['역명'][j].find(name) != -1 :
            # 지하철역명이 존재
            bus_name = bus_name.append(bus_name_ori[j:j+1], ignore_index = True)
            check = 1
    if check == 0 :
        print(name+'은 존재하지 않는다')
##OO역이 존재하지 않은 지하철들은 OO으로 검색

writer = pd.ExcelWriter('bus_name.xlsx') ## bus_name 저장
bus_name.to_excel(writer,'Sheet1')
writer.save()

all_data = {'날짜':[], '기온':[], '강수량or상대습도':[], '미세먼지':[], '대중교통이용량':[]}
all_data = pd.DataFrame(all_data)
#all_data를 저장 할 frame만들기

-----------------------------------버스 원본 데이터 수정 코딩---------------------------------------------
# coding: utf-8

# In[1]:

import pandas as pd
import numpy as np
import pylab as pl
import matplotlib.pyplot as plt
from scipy import polyval
from pylab import plot, title, show, legend


# In[2]:

bus_name=pd.read_excel(r'bus_name.xlsx')
bus_name


# In[3]:

s = ['Sheet1','Sheet2','Sheet3','Sheet4','Sheet5','Sheet6','Sheet7','Sheet8','Sheet9','Sheet10','Sheet11','Sheet12','Sheet13','Sheet14','Sheet15','Sheet16','Sheet17','Sheet18','Sheet19','Sheet20']


# In[4]:

data_form = {'id':[], 'matching':[], 'geton':[], 'getoff':[], 'date':[]} # data 저장형식


# In[5]:

bus_data=[]


# In[ ]:

for index in range(20):
    print("Loading "+str(s[index])) # 진행사항 확인
    bus_ori = pd.read_excel(r'bus_ori.xlsx', sheetname = s[index]) ## 버스 원본 data set읽어오기
    bus_data.append(pd.DataFrame(data_form)) #bus_data 저장 할 frame만들기
    print("The start of "+str(s[index])) # 진행사항 확인
    total_num=0
    for i in range(len(bus_ori)):
        check=0
        ori_id= bus_ori['표준버스정류장ID'][i]
        for j in range(len(bus_name)):
            name_id=bus_name['표준버스정류장ID'][j]
            if name_id=="~": # no information of '표준버스정류장id'
                if bus_ori['역명'][i] == bus_name['역명'][j] and bus_ori['노선번호'][i] == bus_name['노선번호'][j]:
                    check=1
            elif ori_id == name_id : # matching
                check=1
            if check: # there is matching information
                temp_on=0
                temp_off=0
                for k in range(6,53,2): # find the sum of 'get on' and 'get off'
                    temp_on += bus_ori.iat[i,k]
                    temp_off += bus_ori.iat[i,k+1]
                bus_data[index].loc[total_num,'id']=ori_id
                bus_data[index].loc[total_num,'matching']=bus_name['매칭역'][j]
                bus_data[index].loc[total_num,'geton']=temp_on
                bus_data[index].loc[total_num,'getoff']=temp_off
                bus_data[index].loc[total_num,'date']=str(bus_ori['사용년월'][i])
                total_num += 1
                break
    print("The end of "+str(s[index])) # 진행사항 확인


# In[ ]:

with pd.ExcelWriter("bus_data.xlsx") as writer:
    for index in range(20):
        bus_data[index].to_excel(writer, sheet_name=s[index])
    writer.save()


# In[ ]:   

--------------------------------------bus count 코드----------------------------
# coding: utf-8

# In[1]:

import pandas as pd
import numpy as np
import pylab as pl
import matplotlib.pyplot as plt
from scipy import polyval
from pylab import plot, title, show, legend


# In[3]:

s = ['Sheet1','Sheet2','Sheet3','Sheet4','Sheet5','Sheet6','Sheet7','Sheet8','Sheet9','Sheet10','Sheet11','Sheet12','Sheet13','Sheet14','Sheet15','Sheet16','Sheet17','Sheet18','Sheet19','Sheet20']


# In[4]:

data_form = {'date':[], 'matching':[], 'sum_geton':[], 'sum_getoff':[] } # data 저장형식


# In[5]:

bus_result = pd.DataFrame(data_form) #bus_result 저장 할 frame만들기


# In[ ]:

for index in range(20):
    print("Loading "+str(s[index])) # 진행사항 확인
    bus_sheet = pd.read_excel(r'bus_data.xlsx', sheetname = s[index]) ## 버스 원본 data set읽어오기
    print("The start of "+str(s[index])) # 진행사항 확인
    for i in range(len(bus_sheet)):
        check=0
        bus_mat_key = bus_sheet['matching'][i]
        for j in range(len(bus_result)) :
            if(bus_result['matching'][j] == bus_mat_key) and (bus_result['date'][j] == bus_sheet['date'][i]) :
                check = 1
                bus_result.loc[j,'sum_getoff'] += bus_sheet['getoff'][i]
                bus_result.loc[j,'sum_geton'] += bus_sheet['geton'][i]
                break
        if !check : 
            temp = [bus_sheet['date'][i],bus_mat_key, bus_sheet['geton'][i], bus_sheet['getoff'][i]] # initialize
            bus_result.loc[len(bus_result)] = temp
    print("The end of "+str(s[index])) # 진행사항 확인


# In[ ]:

with pd.ExcelWriter("bus_sum.xlsx") as writer:
    bus_result.to_excel(writer)
    writer.save()


# In[ ]:

--------------------------------------보류코드----------------------------
def mean(x) :
    return sum(x) / len(x)

def dot(v,w) :
    return sum(v_i * w_i for v_i, w_i in zip(v,w))

def sum_of_squares(v) :
     return dot(v,v)
    
def de_mean(x) : 
    x_bar = mean(x)
    return [x_i - x_bar for x_i in x]

def variance(x) :
    n = len(x)
    deviations = de_mean(x)
    return sum_of_squares(deviations) / (n-1)

def standard_deviation(x) :
    return math.sqrt(variance(x))

def covariance(x,y) :
    n = len(x)
    return dot(de_mean(x), de_mean(y)) / (n-1)

def correlation(x,y) :
    stdev_x = standard_deviation(x)
    stdev_y = standard_deviation(y)
    
    if stdev_x > 0 and stdev_y > 0:
        return covariance(x,y) / stdev_x / stdev_y
    else :
        return 0 # 편차가 존재하지 않는다면 상관관계는 0
        
def normalized(x) :
    x_min = min(x)
    x_max = max(x)
    normal = [0 for i in range(len(x))]
    for i in range(len(x)) :
        normal[i] = (x[i] -x_min) / (x_max - x_min)
    return normal
-------------------------------------------------------------
